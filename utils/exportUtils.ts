// @ts-ignore
import jsPDF from "jspdf"

interface ExportData {
  query: string
  summary: string
  sources: Array<{
    title: string
    url: string
    snippet: string
    displayUrl?: string
  }>
  confidence?: number
  timestamp: string
  language?: string
}

export function exportToPDF(data: ExportData): void {
  try {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    const maxWidth = pageWidth - 2 * margin
    let yPosition = margin

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize = 12, isBold = false, color = [0, 0, 0]) => {
      pdf.setFontSize(fontSize)
      pdf.setTextColor(color[0], color[1], color[2])

      if (isBold) {
        pdf.setFont("helvetica", "bold")
      } else {
        pdf.setFont("helvetica", "normal")
      }

      const lines = pdf.splitTextToSize(text, maxWidth)

      lines.forEach((line: string) => {
        // Check if we need a new page
        if (yPosition > pageHeight - margin - 20) {
          pdf.addPage()
          yPosition = margin
        }

        pdf.text(line, margin, yPosition)
        yPosition += fontSize * 0.6
      })

      yPosition += 8 // Add spacing after text block
    }

    // Header with logo area
    pdf.setFillColor(99, 102, 241) // Indigo color
    pdf.rect(0, 0, pageWidth, 40, "F")

    pdf.setTextColor(255, 255, 255)
    pdf.setFontSize(24)
    pdf.setFont("helvetica", "bold")
    pdf.text("Lumina AI Search Results", margin, 25)

    yPosition = 60

    // Query section
    addText("Search Query", 16, true, [99, 102, 241])
    addText(data.query, 14, false, [55, 65, 81])

    // Metadata
    addText("Generated", 14, true, [99, 102, 241])
    addText(data.timestamp, 12, false, [107, 114, 128])

    if (data.confidence) {
      addText("Confidence Score", 14, true, [99, 102, 241])
      addText(`${data.confidence}%`, 12, false, [107, 114, 128])
    }

    if (data.language && data.language !== "en") {
      addText("Language", 14, true, [99, 102, 241])
      addText(data.language.toUpperCase(), 12, false, [107, 114, 128])
    }

    yPosition += 10

    // AI Summary section
    addText("AI Summary", 18, true, [99, 102, 241])
    addText(data.summary, 11, false, [31, 41, 55])

    yPosition += 15

    // Sources section
    addText("Sources & Citations", 18, true, [99, 102, 241])

    data.sources.forEach((source, index) => {
      // Source number
      addText(`[${index + 1}] ${source.title}`, 13, true, [17, 24, 39])

      // URL
      addText(`üîó ${source.displayUrl || source.url}`, 10, false, [59, 130, 246])

      // Snippet
      addText(source.snippet, 10, false, [75, 85, 99])

      yPosition += 5 // Extra spacing between sources
    })

    // Footer
    const footerY = pageHeight - 20
    pdf.setFontSize(8)
    pdf.setTextColor(107, 114, 128)
    pdf.text("Generated by Lumina AI Search Engine - https://lumina-ai.com", margin, footerY)

    // Save the PDF
    const filename = `lumina-search-${data.query.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}-${Date.now()}.pdf`
    pdf.save(filename)

    console.log("PDF exported successfully:", filename)
  } catch (error) {
    console.error("PDF export error:", error)
    throw new Error("Failed to export PDF")
  }
}

export function exportToMarkdown(data: ExportData): void {
  try {
    const markdown = `# üß† Lumina AI Search Results

## üîç Search Query
**${data.query}**

## üìÖ Generated
${data.timestamp}

${data.confidence ? `## üìä Confidence Score\n**${data.confidence}%**\n\n` : ""}${data.language && data.language !== "en" ? `## üåç Language\n**${data.language.toUpperCase()}**\n\n` : ""}

## ü§ñ AI Summary
${data.summary}

## üìö Sources & Citations

${data.sources
  .map(
    (source, index) => `### [${index + 1}] ${source.title}

**üîó URL:** [${source.displayUrl || source.url}](${source.url})

**üìù Summary:** ${source.snippet}

---
`,
  )
  .join("\n")}

## üè∑Ô∏è Metadata
- **Search Engine:** Lumina AI
- **AI Model:** GPT-4o-mini
- **Search Provider:** Bing Search API
- **Export Format:** Markdown
- **File Generated:** ${new Date().toISOString()}

---
*üöÄ Powered by Lumina AI Search Engine*
`

    const blob = new Blob([markdown], { type: "text/markdown;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `lumina-search-${data.query.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}-${Date.now()}.md`
    a.style.display = "none"

    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)

    // Clean up the URL object
    setTimeout(() => URL.revokeObjectURL(url), 100)

    console.log("Markdown exported successfully")
  } catch (error) {
    console.error("Markdown export error:", error)
    throw new Error("Failed to export Markdown")
  }
}

// Utility function to format text for export
export function formatTextForExport(text: string): string {
  return text
    .replace(/\[\d+\]/g, (match) => `**${match}**`) // Bold citations
    .replace(/‚ö†Ô∏è/g, "‚ö†Ô∏è **Warning:**") // Format warnings
    .trim()
}

// Function to validate export data
export function validateExportData(data: Partial<ExportData>): data is ExportData {
  return !!(
    data.query &&
    data.summary &&
    data.sources &&
    Array.isArray(data.sources) &&
    data.sources.length > 0 &&
    data.timestamp
  )
}
